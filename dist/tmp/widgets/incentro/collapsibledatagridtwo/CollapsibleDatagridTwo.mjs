import { useRef, useState, useEffect, createElement } from 'react';

function CollapsibleDatagridTwo({
  closeOnClick,
  contentWidgets,
  openByBoolean,
  ...rest
}) {
  const style = rest.class || "";
  const chevronRef = useRef(null);
  const collapsibleRef = useRef(null);
  const datagrid = useRef(null);
  const [chevronActive, setChevronActive] = useState(false);
  useEffect(() => {
    if (!closeOnClick || !chevronActive) return;
    function handleClickOutside(event) {
      const row = collapsibleRef.current?.closest('.tr');
      if (collapsibleRef.current && chevronRef.current && row && !collapsibleRef.current.contains(event.target) && !chevronRef.current.contains(event.target) && !row.contains(event.target)) {
        setChevronActive(false);
        openByBoolean?.setValue(false);
      }
    }
    document.addEventListener("mouseup", handleClickOutside);
    return () => document.removeEventListener("mouseup", handleClickOutside);
  }, [chevronActive, closeOnClick]);
  function toggleTrCollapse(event) {
    event.preventDefault();
    event.stopPropagation();

    // Remove the useOutsideAlerter call
    if (openByBoolean?.setValue) {
      openByBoolean.setValue(!openByBoolean.value);
    } else {
      setChevronActive(!chevronActive);
    }
  }
  useEffect(() => {
    if (collapsibleRef && collapsibleRef.current) {
      datagrid.current = chevronRef.current.closest('.widget-datagrid');
      const row = collapsibleRef.current.closest(".tr");
      row.appendChild(collapsibleRef.current);
    }
  });
  useEffect(() => {
    if (openByBoolean?.value !== undefined) {
      setChevronActive(Boolean(openByBoolean.value));
    }
  }, [openByBoolean?.value]);
  return createElement("div", null, createElement("div", {
    className: `btn-td-collapse ${style} ${chevronActive ? "btn-td-collapse--active" : ""}`,
    ref: chevronRef,
    onClick: toggleTrCollapse
  }, createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    height: "16",
    width: "16",
    viewBox: "0 0 16 16"
  }, createElement("path", {
    d: "M8.00004 11.1369C8.21033 11.1369 8.38741 11.0539 8.54789 10.8934L12.4935 6.85368C12.6208 6.72087 12.6872 6.56592 12.6872 6.37777C12.6872 5.9904 12.3829 5.68604 12.0066 5.68604C11.8239 5.68604 11.6469 5.76351 11.5085 5.90186L8.00557 9.50439L4.49158 5.90186C4.35876 5.76904 4.18722 5.68604 3.99353 5.68604C3.61723 5.68604 3.31287 5.9904 3.31287 6.37777C3.31287 6.56038 3.38481 6.72087 3.51208 6.85368L7.45772 10.8934C7.62374 11.0594 7.79529 11.1369 8.00004 11.1369Z"
  }))), createElement("div", {
    className: `tr-collapsible ${chevronActive ? "" : "tr-collapsible--collapsed"}`,
    ref: collapsibleRef
  }, contentWidgets));
  // }
}

export { CollapsibleDatagridTwo };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGFwc2libGVEYXRhZ3JpZFR3by5tanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9Db2xsYXBzaWJsZURhdGFncmlkVHdvLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL3VpL0NvbGxhcHNpYmxlRGF0YWdyaWRUd28uY3NzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvbGxhcHNpYmxlRGF0YWdyaWRUd28oeyBjbG9zZU9uQ2xpY2ssIGNvbnRlbnRXaWRnZXRzLCBvcGVuQnlCb29sZWFuLCAuLi5yZXN0IH0pIHtcclxuICAgIGNvbnN0IHN0eWxlID0gcmVzdC5jbGFzcyB8fCBcIlwiO1xyXG4gICAgY29uc3QgY2hldnJvblJlZiA9IHVzZVJlZihudWxsKTtcclxuICAgIGNvbnN0IGNvbGxhcHNpYmxlUmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3QgZGF0YWdyaWQgPSB1c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBbY2hldnJvbkFjdGl2ZSwgc2V0Q2hldnJvbkFjdGl2ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFjbG9zZU9uQ2xpY2sgfHwgIWNoZXZyb25BY3RpdmUpIHJldHVybjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGNvbGxhcHNpYmxlUmVmLmN1cnJlbnQ/LmNsb3Nlc3QoJy50cicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGNvbGxhcHNpYmxlUmVmLmN1cnJlbnQgJiYgXHJcbiAgICAgICAgICAgIGNoZXZyb25SZWYuY3VycmVudCAmJiBcclxuICAgICAgICAgICAgcm93ICYmIFxyXG4gICAgICAgICAgICAhY29sbGFwc2libGVSZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmIFxyXG4gICAgICAgICAgICAhY2hldnJvblJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgXHJcbiAgICAgICAgICAgICFyb3cuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgc2V0Q2hldnJvbkFjdGl2ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBvcGVuQnlCb29sZWFuPy5zZXRWYWx1ZShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlQ2xpY2tPdXRzaWRlKTtcclxuICAgIH0sIFtjaGV2cm9uQWN0aXZlLCBjbG9zZU9uQ2xpY2tdKTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gdG9nZ2xlVHJDb2xsYXBzZShldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgdXNlT3V0c2lkZUFsZXJ0ZXIgY2FsbFxyXG4gICAgICAgIGlmIChvcGVuQnlCb29sZWFuPy5zZXRWYWx1ZSkge1xyXG4gICAgICAgICAgICBvcGVuQnlCb29sZWFuLnNldFZhbHVlKCFvcGVuQnlCb29sZWFuLnZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRDaGV2cm9uQWN0aXZlKCFjaGV2cm9uQWN0aXZlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvbGxhcHNpYmxlUmVmICYmIGNvbGxhcHNpYmxlUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgZGF0YWdyaWQuY3VycmVudCA9IGNoZXZyb25SZWYuY3VycmVudC5jbG9zZXN0KCcud2lkZ2V0LWRhdGFncmlkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGNvbGxhcHNpYmxlUmVmLmN1cnJlbnQuY2xvc2VzdChcIi50clwiKTtcclxuICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKGNvbGxhcHNpYmxlUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7IFxyXG4gICAgICAgIGlmIChvcGVuQnlCb29sZWFuPy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNldENoZXZyb25BY3RpdmUoQm9vbGVhbihvcGVuQnlCb29sZWFuLnZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW29wZW5CeUJvb2xlYW4/LnZhbHVlXSk7XHJcbiAgICBcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BidG4tdGQtY29sbGFwc2UgJHtzdHlsZX0gJHtjaGV2cm9uQWN0aXZlID8gXCJidG4tdGQtY29sbGFwc2UtLWFjdGl2ZVwiIDogXCJcIn1gfSByZWY9e2NoZXZyb25SZWZ9IG9uQ2xpY2s9e3RvZ2dsZVRyQ29sbGFwc2V9PlxyXG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMTZcIiB3aWR0aD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNOC4wMDAwNCAxMS4xMzY5QzguMjEwMzMgMTEuMTM2OSA4LjM4NzQxIDExLjA1MzkgOC41NDc4OSAxMC44OTM0TDEyLjQ5MzUgNi44NTM2OEMxMi42MjA4IDYuNzIwODcgMTIuNjg3MiA2LjU2NTkyIDEyLjY4NzIgNi4zNzc3N0MxMi42ODcyIDUuOTkwNCAxMi4zODI5IDUuNjg2MDQgMTIuMDA2NiA1LjY4NjA0QzExLjgyMzkgNS42ODYwNCAxMS42NDY5IDUuNzYzNTEgMTEuNTA4NSA1LjkwMTg2TDguMDA1NTcgOS41MDQzOUw0LjQ5MTU4IDUuOTAxODZDNC4zNTg3NiA1Ljc2OTA0IDQuMTg3MjIgNS42ODYwNCAzLjk5MzUzIDUuNjg2MDRDMy42MTcyMyA1LjY4NjA0IDMuMzEyODcgNS45OTA0IDMuMzEyODcgNi4zNzc3N0MzLjMxMjg3IDYuNTYwMzggMy4zODQ4MSA2LjcyMDg3IDMuNTEyMDggNi44NTM2OEw3LjQ1NzcyIDEwLjg5MzRDNy42MjM3NCAxMS4wNTk0IDcuNzk1MjkgMTEuMTM2OSA4LjAwMDA0IDExLjEzNjlaXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B0ci1jb2xsYXBzaWJsZSAke2NoZXZyb25BY3RpdmUgPyBcIlwiIDogXCJ0ci1jb2xsYXBzaWJsZS0tY29sbGFwc2VkXCJ9YH0gcmVmPXtjb2xsYXBzaWJsZVJlZn0+XHJcbiAgICAgICAgICAgICAgICB7Y29udGVudFdpZGdldHN9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICAgIC8vIH1cclxufVxyXG4iXSwibmFtZXMiOlsiQ29sbGFwc2libGVEYXRhZ3JpZFR3byIsImNsb3NlT25DbGljayIsImNvbnRlbnRXaWRnZXRzIiwib3BlbkJ5Qm9vbGVhbiIsInJlc3QiLCJzdHlsZSIsImNsYXNzIiwiY2hldnJvblJlZiIsInVzZVJlZiIsImNvbGxhcHNpYmxlUmVmIiwiZGF0YWdyaWQiLCJjaGV2cm9uQWN0aXZlIiwic2V0Q2hldnJvbkFjdGl2ZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwiZXZlbnQiLCJyb3ciLCJjdXJyZW50IiwiY2xvc2VzdCIsImNvbnRhaW5zIiwidGFyZ2V0Iiwic2V0VmFsdWUiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidG9nZ2xlVHJDb2xsYXBzZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwidmFsdWUiLCJhcHBlbmRDaGlsZCIsInVuZGVmaW5lZCIsIkJvb2xlYW4iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwicmVmIiwib25DbGljayIsInhtbG5zIiwiaGVpZ2h0Iiwid2lkdGgiLCJ2aWV3Qm94IiwiZCJdLCJtYXBwaW5ncyI6Ijs7QUFHTyxTQUFTQSxzQkFBc0JBLENBQUM7RUFBRUMsWUFBWTtFQUFFQyxjQUFjO0VBQUVDLGFBQWE7RUFBRSxHQUFHQyxJQUFBQTtBQUFLLENBQUMsRUFBRTtBQUM3RixFQUFBLE1BQU1DLEtBQUssR0FBR0QsSUFBSSxDQUFDRSxLQUFLLElBQUksRUFBRSxDQUFBO0FBQzlCLEVBQUEsTUFBTUMsVUFBVSxHQUFHQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDL0IsRUFBQSxNQUFNQyxjQUFjLEdBQUdELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNuQyxFQUFBLE1BQU1FLFFBQVEsR0FBR0YsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0VBQzdCLE1BQU0sQ0FBQ0csYUFBYSxFQUFFQyxnQkFBZ0IsQ0FBQyxHQUFHQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7QUFFekRDLEVBQUFBLFNBQVMsQ0FBQyxNQUFNO0FBQ1osSUFBQSxJQUFJLENBQUNiLFlBQVksSUFBSSxDQUFDVSxhQUFhLEVBQUUsT0FBQTtJQUVyQyxTQUFTSSxrQkFBa0JBLENBQUNDLEtBQUssRUFBRTtNQUMvQixNQUFNQyxHQUFHLEdBQUdSLGNBQWMsQ0FBQ1MsT0FBTyxFQUFFQyxPQUFPLENBQUMsS0FB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
