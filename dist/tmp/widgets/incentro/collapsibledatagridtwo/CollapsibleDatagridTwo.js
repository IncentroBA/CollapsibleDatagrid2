define(['exports', 'react'], (function (exports, react) { 'use strict';

    function CollapsibleDatagridTwo({
      closeOnClick,
      contentWidgets,
      ...rest
    }) {
      const style = rest.class || "";
      const chevronRef = react.useRef(null);
      const collapsibleRef = react.useRef(null);
      const datagrid = react.useRef(null);
      const [isActive, setIsActive] = react.useState(false);
      function useOutsideAlerter(ref1, ref2) {
        function handleClickOutside(event) {
          if (ref1.current && !ref1.current.contains(event.target) && !ref2.current.contains(event.target)) {
            setTimeout(() => setIsActive(false), 20);
          }
        }
        document.addEventListener("mousedown", handleClickOutside); // Bind the event listener
        return () => document.removeEventListener("mousedown", handleClickOutside); // Unbind the event listener on clean up
      }
      function toggleTrCollapse() {
        setIsActive(!isActive);
        closeOnClick && useOutsideAlerter(collapsibleRef, chevronRef);
      }
      react.useEffect(() => {
        if (collapsibleRef && collapsibleRef.current) {
          datagrid.current = chevronRef.current.closest('.widget-datagrid');
          const row = collapsibleRef.current.closest(".tr");
          row.appendChild(collapsibleRef.current);
        }
      });
      return react.createElement("div", null, react.createElement("div", {
        className: `btn-td-collapse ${style} ${isActive ? "btn-td-collapse--active" : ""}`,
        ref: chevronRef,
        onClick: toggleTrCollapse
      }, react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        height: "16",
        width: "16",
        viewBox: "0 0 16 16"
      }, react.createElement("path", {
        d: "M8.00004 11.1369C8.21033 11.1369 8.38741 11.0539 8.54789 10.8934L12.4935 6.85368C12.6208 6.72087 12.6872 6.56592 12.6872 6.37777C12.6872 5.9904 12.3829 5.68604 12.0066 5.68604C11.8239 5.68604 11.6469 5.76351 11.5085 5.90186L8.00557 9.50439L4.49158 5.90186C4.35876 5.76904 4.18722 5.68604 3.99353 5.68604C3.61723 5.68604 3.31287 5.9904 3.31287 6.37777C3.31287 6.56038 3.38481 6.72087 3.51208 6.85368L7.45772 10.8934C7.62374 11.0594 7.79529 11.1369 8.00004 11.1369Z"
      }))), react.createElement("div", {
        className: `tr-collapsible ${isActive ? "" : "tr-collapsible--collapsed"}`,
        ref: collapsibleRef
      }, contentWidgets));
      // }
    }

    exports.CollapsibleDatagridTwo = CollapsibleDatagridTwo;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGFwc2libGVEYXRhZ3JpZFR3by5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL0NvbGxhcHNpYmxlRGF0YWdyaWRUd28uanN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vdWkvQ29sbGFwc2libGVEYXRhZ3JpZFR3by5jc3NcIjtcclxuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29sbGFwc2libGVEYXRhZ3JpZFR3byh7IGNsb3NlT25DbGljaywgY29udGVudFdpZGdldHMsIC4uLnJlc3QgfSkge1xyXG4gICAgY29uc3Qgc3R5bGUgPSByZXN0LmNsYXNzIHx8IFwiXCI7XHJcbiAgICBjb25zdCBjaGV2cm9uUmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3QgY29sbGFwc2libGVSZWYgPSB1c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBkYXRhZ3JpZCA9IHVzZVJlZihudWxsKTtcclxuICAgIGNvbnN0IFtpc0FjdGl2ZSwgc2V0SXNBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB1c2VPdXRzaWRlQWxlcnRlcihyZWYxLCByZWYyKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2tPdXRzaWRlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChyZWYxLmN1cnJlbnQgJiYgIXJlZjEuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFyZWYyLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzZXRJc0FjdGl2ZShmYWxzZSksIDIwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZUNsaWNrT3V0c2lkZSk7IC8vIEJpbmQgdGhlIGV2ZW50IGxpc3RlbmVyXHJcbiAgICAgICAgcmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgaGFuZGxlQ2xpY2tPdXRzaWRlKTsgLy8gVW5iaW5kIHRoZSBldmVudCBsaXN0ZW5lciBvbiBjbGVhbiB1cFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVUckNvbGxhcHNlKCkge1xyXG4gICAgICAgIHNldElzQWN0aXZlKCFpc0FjdGl2ZSlcclxuICAgICAgICBjbG9zZU9uQ2xpY2sgJiYgdXNlT3V0c2lkZUFsZXJ0ZXIoY29sbGFwc2libGVSZWYsIGNoZXZyb25SZWYpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChjb2xsYXBzaWJsZVJlZiAmJiBjb2xsYXBzaWJsZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGRhdGFncmlkLmN1cnJlbnQgPSBjaGV2cm9uUmVmLmN1cnJlbnQuY2xvc2VzdCgnLndpZGdldC1kYXRhZ3JpZCcpO1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSBjb2xsYXBzaWJsZVJlZi5jdXJyZW50LmNsb3Nlc3QoXCIudHJcIik7XHJcbiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjb2xsYXBzaWJsZVJlZi5jdXJyZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGJ0bi10ZC1jb2xsYXBzZSAke3N0eWxlfSAke2lzQWN0aXZlID8gXCJidG4tdGQtY29sbGFwc2UtLWFjdGl2ZVwiIDogXCJcIn1gfSByZWY9e2NoZXZyb25SZWZ9IG9uQ2xpY2s9e3RvZ2dsZVRyQ29sbGFwc2V9PlxyXG4gICAgICAgICAgICAgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgaGVpZ2h0PVwiMTZcIiB3aWR0aD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNOC4wMDAwNCAxMS4xMzY5QzguMjEwMzMgMTEuMTM2OSA4LjM4NzQxIDExLjA1MzkgOC41NDc4OSAxMC44OTM0TDEyLjQ5MzUgNi44NTM2OEMxMi42MjA4IDYuNzIwODcgMTIuNjg3MiA2LjU2NTkyIDEyLjY4NzIgNi4zNzc3N0MxMi42ODcyIDUuOTkwNCAxMi4zODI5IDUuNjg2MDQgMTIuMDA2NiA1LjY4NjA0QzExLjgyMzkgNS42ODYwNCAxMS42NDY5IDUuNzYzNTEgMTEuNTA4NSA1LjkwMTg2TDguMDA1NTcgOS41MDQzOUw0LjQ5MTU4IDUuOTAxODZDNC4zNTg3NiA1Ljc2OTA0IDQuMTg3MjIgNS42ODYwNCAzLjk5MzUzIDUuNjg2MDRDMy42MTcyMyA1LjY4NjA0IDMuMzEyODcgNS45OTA0IDMuMzEyODcgNi4zNzc3N0MzLjMxMjg3IDYuNTYwMzggMy4zODQ4MSA2LjcyMDg3IDMuNTEyMDggNi44NTM2OEw3LjQ1NzcyIDEwLjg5MzRDNy42MjM3NCAxMS4wNTk0IDcuNzk1MjkgMTEuMTM2OSA4LjAwMDA0IDExLjEzNjlaXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B0ci1jb2xsYXBzaWJsZSAke2lzQWN0aXZlID8gXCJcIiA6IFwidHItY29sbGFwc2libGUtLWNvbGxhcHNlZFwifWB9IHJlZj17Y29sbGFwc2libGVSZWZ9PlxyXG4gICAgICAgICAgICAgICAge2NvbnRlbnRXaWRnZXRzfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgICAvLyB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNvbGxhcHNpYmxlRGF0YWdyaWRUd28iLCJjbG9zZU9uQ2xpY2siLCJjb250ZW50V2lkZ2V0cyIsInJlc3QiLCJzdHlsZSIsImNsYXNzIiwiY2hldnJvblJlZiIsInVzZVJlZiIsImNvbGxhcHNpYmxlUmVmIiwiZGF0YWdyaWQiLCJpc0FjdGl2ZSIsInNldElzQWN0aXZlIiwidXNlU3RhdGUiLCJ1c2VPdXRzaWRlQWxlcnRlciIsInJlZjEiLCJyZWYyIiwiaGFuZGxlQ2xpY2tPdXRzaWRlIiwiZXZlbnQiLCJjdXJyZW50IiwiY29udGFpbnMiLCJ0YXJnZXQiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRvZ2dsZVRyQ29sbGFwc2UiLCJ1c2VFZmZlY3QiLCJjbG9zZXN0Iiwicm93IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwicmVmIiwib25DbGljayIsInhtbG5zIiwiaGVpZ2h0Iiwid2lkdGgiLCJ2aWV3Qm94IiwiZCJdLCJtYXBwaW5ncyI6Ijs7SUFHTyxTQUFTQSxzQkFBc0JBLENBQUM7TUFBRUMsWUFBWTtNQUFFQyxjQUFjO01BQUUsR0FBR0MsSUFBQUE7SUFBSyxDQUFDLEVBQUU7SUFDOUUsRUFBQSxNQUFNQyxLQUFLLEdBQUdELElBQUksQ0FBQ0UsS0FBSyxJQUFJLEVBQUUsQ0FBQTtJQUM5QixFQUFBLE1BQU1DLFVBQVUsR0FBR0MsWUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQy9CLEVBQUEsTUFBTUMsY0FBYyxHQUFHRCxZQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbkMsRUFBQSxNQUFNRSxRQUFRLEdBQUdGLFlBQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtNQUM3QixNQUFNLENBQUNHLFFBQVEsRUFBRUMsV0FBVyxDQUFDLEdBQUdDLGNBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUUvQyxFQUFBLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsSUFBSSxFQUFFQyxJQUFJLEVBQUU7UUFDbkMsU0FBU0Msa0JBQWtCQSxDQUFDQyxLQUFLLEVBQUU7VUFDL0IsSUFBSUgsSUFBSSxDQUFDSSxPQUFPLElBQUksQ0FBQ0osSUFBSSxDQUFDSSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDRyxNQUFNLENBQUMsSUFBSSxDQUFDTCxJQUFJLENBQUNHLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDRixLQUFLLENBQUNHLE1BQU0sQ0FBQyxFQUFFO1lBQzlGQyxVQUFVLENBQUMsTUFBTVYsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzVDLE9BQUE7SUFDSixLQUFBO1FBRUFXLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsV0FBVyxFQUFFUCxrQkFBa0IsQ0FBQyxDQUFDO1FBQzNELE9BQU8sTUFBTU0sUUFBUSxDQUFDRSxtQkFBbUIsQ0FBQyxXQUFXLEVBQUVSLGtCQUFrQixDQUFDLENBQUM7SUFDL0UsR0FBQTtNQUVBLFNBQVNTLGdCQUFnQkEsR0FBRztRQUN4QmQsV0FBVyxDQUFDLENBQUNELFFBQVEsQ0FBQyxDQUFBO0lBQ3RCVCxJQUFBQSxZQUFZLElBQUlZLGlCQUFpQixDQUFDTCxjQUFjLEVBQUVGLFVBQVUsQ0FBQyxDQUFBO0lBQ2pFLEdBQUE7SUFFQW9CLEVBQUFBLGVBQVMsQ0FBQyxNQUFNO0lBQ1osSUFBQSxJQUFJbEIsY0FBYyxJQUFJQSxjQUFjLENBQUNVLE9BQU8sRUFBRTtVQUMxQ1QsUUFBUSxDQUFDUyxPQUFPLEdBQUdaLFVBQVUsQ0FBQ1ksT0FBTyxDQUFDUyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtVQUNqRSxNQUFNQyxHQUFHLEdBQUdwQixjQUFjLENBQUNVLE9BQU8sQ0FBQ1MsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2pEQyxNQUFBQSxHQUFHLENBQUNDLFdBQVcsQ0FBQ3JCLGNBQWMsQ0FBQ1UsT0FBTyxDQUFDLENBQUE7SUFDM0MsS0FBQTtJQUNKLEdBQUMsQ0FBQyxDQUFBO01BRUYsT0FDSVksbUJBQUEsY0FDSUEsbUJBQUEsQ0FBQSxLQUFBLEVBQUE7UUFBS0MsU0FBUyxFQUFHLG1CQUFrQjNCLEtBQU0sQ0FBQSxDQUFBLEVBQUdNLFFBQVEsR0FBRyx5QkFBeUIsR0FBRyxFQUFHLENBQUUsQ0FBQTtJQUFDc0IsSUFBQUEsR0FBRyxFQUFFMUIsVUFBVztJQUFDMkIsSUFBQUEsT0FBTyxFQUFFUixnQkFBQUE7SUFBaUIsR0FBQSxFQUNoSUssbUJBQUEsQ0FBQSxLQUFBLEVBQUE7SUFBS0ksSUFBQUEsS0FBSyxFQUFDLDRCQUE0QjtJQUFDQyxJQUFBQSxNQUFNLEVBQUMsSUFBSTtJQUFDQyxJQUFBQSxLQUFLLEVBQUMsSUFBSTtJQUFDQyxJQUFBQSxPQUFPLEVBQUMsV0FBQTtJQUFXLEdBQUEsRUFDOUVQLG1CQUFBLENBQUEsTUFBQSxFQUFBO0lBQU1RLElBQUFBLENBQUMsRUFBQyxpZEFBQTtJQUFpZCxHQUFFLENBQzFkLENBQ0osQ0FBQyxFQUNOUixtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxJQUFBQSxTQUFTLEVBQUcsQ0FBaUJyQixlQUFBQSxFQUFBQSxRQUFRLEdBQUcsRUFBRSxHQUFHLDJCQUE0QixDQUFFLENBQUE7SUFBQ3NCLElBQUFBLEdBQUcsRUFBRXhCLGNBQUFBO09BQ2pGTixFQUFBQSxjQUNBLENBQ0osQ0FBQyxDQUFBO0lBRVY7SUFDSjs7Ozs7Ozs7OzsifQ==
